Install mojito first as:
$ git clone git://github.com/yahoo/mojito.git
$ cd mojito/source
$ npm install -g .
$ npm install .

or check the http://github.com/yahoo/mojito for more details on installation

enter mojito/source dir (cd ~/mojito/source)
and do: git clone git://github.com/chetanankola/feather-application.git

this will create a dir called feather-application with all the source files.

cd feather-application

run 
	mojito start 
		or
	mojito start --context "environment:dev"
check your application running at http://localhost:8001/




CHECKIN MOJIT AND LOGIN MOJIT:
==============================
These two mojit are facebook related mojits.
Login mojit does authentication and puts the access_token in a cookie named "fb_access_token"
All othe mojits including checkin mojit if need to pull data from facebook graph needs to use this access token.
	================================
	What about APP KEY for Facebook:
	================================
	As you would know that every facebook graph api needs an app key app secret etc? and its all tied to a host url.
	Currently for this scaffold mojito app all that details is stored in defaults.json of login mojit ["mojits/login/defaults.json"] and is tied to localhost:8001

	if you want to use this mojito on your own host url facebook related stuff will fail. so you need to get app key for ur url from facebook developer api and put ur information in the defaults.json.




TWITTER MOJIT : how does this work
===================================
so go to the mojits/twitter/controller.server.js and to the index function
thats where you start from.
           if(!ac.params.getFromRoute('defer')){
                var loaderImg1 = 'http://a.l.yimg.com/a/i/us/sch/mob/spinner-white-small.gif';
                var loaderImg2 = 'http://a.l.yimg.com/a/i/us/sch/mob/spinner-1.0.0.gif';
                return  ac.done({'onload':{url:loaderImg2}});
            }
So here I do my own custom lazy loading where the mojits execute later after the parent (main mojit) has finished execution
here you check for any defer params passed to the controller by either mojits/twitter/binders/index.js or from url etc..

if you see none then you just put a "loading gif" and return meaning no more code of twitter mojit runs.

now lets go back to mojits/twitter/binders/index.js 
here since controller.server.js a while ago since finished itself.. this gets loaded..
here I do
            var args = {params: {route: {
                            coord:{lat:lat,lon:lon,radius:radius},defer:true
                        }}};
            this.mojitProxy.refreshView(args);
so what this does is basically refresh the mojit (passing the code execution control to controller back again.)
now the controller.. again


this time   if(!ac.params.getFromRoute('defer')){ wont run.. instead runs the later part of the server code.. which is pulling the tweets..






