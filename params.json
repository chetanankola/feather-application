{"name":"Feather-application","body":"# # Feather-Application is a mojito _[http://github.com/yahoo/mojito]_ application (hence a node.js application) that has a set of mojits:\r\n1. login: for facebook graph api auth\r\n2. checkin: for facebook checkin\r\n3. maps: ymaps\r\n4. twitter application (talks to map mojit for lat long tweet update)\r\n5. weather \r\n\r\nThis application will run on localhost:8001 port. To change the port configure application.json file in outermost directory: AppPort \r\n\r\nInstall mojito first as:\r\n$ git clone git://github.com/yahoo/mojito.git\r\n$ cd mojito/source\r\n$ npm install -g .\r\n$ npm install .\r\n\r\nor check the http://github.com/yahoo/mojito for more details on installation\r\n\r\nenter mojito/source dir (cd ~/mojito/source)\r\nand do: git clone git://github.com/chetanankola/feather-application.git\r\n\r\nthis will create a dir called feather-application with all the source files.\r\n\r\ncd feather-application\r\n\r\nrun \r\n\tmojito start \r\n\t\tor\r\n\tmojito start --context \"environment:dev\"\r\ncheck your application running at http://localhost:8001/\r\n\r\n\r\n\r\n\r\nCHECKIN MOJIT AND LOGIN MOJIT:\r\n==============================\r\nThese two mojit are facebook related mojits.\r\nLogin mojit does authentication and puts the access_token in a cookie named \"fb_access_token\"\r\nAll othe mojits including checkin mojit if need to pull data from facebook graph needs to use this access token.\r\n\t================================\r\n\tWhat about APP KEY for Facebook:\r\n\t================================\r\n\tAs you would know that every facebook graph api needs an app key app secret etc? and its all tied to a host url.\r\n\tCurrently for this scaffold mojito app all that details is stored in defaults.json of login mojit [\"mojits/login/defaults.json\"] and is tied to localhost:8001\r\n\r\n\tif you want to use this mojito on your own host url facebook related stuff will fail. so you need to get app key for ur url from facebook developer api and put ur information in the defaults.json.\r\n\r\n\r\n\r\n\r\nTWITTER MOJIT : how does this work\r\n===================================\r\nso go to the mojits/twitter/controller.server.js and to the index function\r\nthats where you start from.\r\n```\r\n           if(!ac.params.getFromRoute('defer')){\r\n                var loaderImg1 = 'http://a.l.yimg.com/a/i/us/sch/mob/spinner-white-small.gif';\r\n                var loaderImg2 = 'http://a.l.yimg.com/a/i/us/sch/mob/spinner-1.0.0.gif';\r\n                return  ac.done({'onload':{url:loaderImg2}});\r\n            }\r\n```\r\nSo here I do my own custom lazy loading where the mojits execute later after the parent (main mojit) has finished execution\r\nhere you check for any defer params passed to the controller by either mojits/twitter/binders/index.js or from url etc..\r\n\r\nif you see none then you just put a \"loading gif\" and return meaning no more code of twitter mojit runs.\r\n\r\nnow lets go back to mojits/twitter/binders/index.js \r\nhere since controller.server.js a while ago since finished itself.. this gets loaded..\r\nhere I do\r\n```\r\n            var args = {params: {route: {\r\n                            coord:{lat:lat,lon:lon,radius:radius},defer:true\r\n                        }}};\r\n            this.mojitProxy.refreshView(args);\r\n```\r\nso what this does is basically refresh the mojit (passing the code execution control to controller back again.)\r\nnow the controller.. again\r\n\r\n\r\nthis time  \r\n``` if(!ac.params.getFromRoute('defer')){\r\n```\r\n wont run.. instead runs the later part of the server code.. which is pulling the tweets..\r\n\r\n\r\n\r\n\r\n\r\n\r\n","tagline":"facebook weather application","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}